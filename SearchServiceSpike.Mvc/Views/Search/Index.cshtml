@using WebApplication1.Controllers 
@model ResultModel
                
@{ ViewBag.Title = "Home Page"; }

<h1>Search</h1>

<div class="row">
    <div class="col-lg-12">
        @using (Html.BeginForm("Index", "Search", FormMethod.Post))
        {
            @Html.TextBox("query", Model.InputQuery, new {@class = "input-lg", @style = "width:800px; max-width: 800px; margin-bottom:15px;"})
            <br/>
            <div id="addFieldsContainer">
                <span id="search-addfield-fn" class="addfield">firstName</span>
                <span id="search-addfield-ln" class="addfield">lastName</span>
                <span id="search-addfield-sn" class="addfield">skills.name</span>
                <span id="search-addfield-syrs" class="addfield">skills.yearsOfExperience</span>
                <span id="search-addfield-cn" class="addfield">certifications.name</span>
                <span id="search-addfield-cda" class="addfield">certifications.dateAchieved</span>
                <span id="search-addfield-all" class="addfield">_all</span>
            </div>
            <br/>
            <input type="submit" class="btn btn-primary" value="Search &raquo;" />
        }
    </div>
</div>
<div class="row" style="margin-top:20px;">
    <div class="col-md-1">
        <button data-toggle="collapse" data-target="#queryHelp">Help</button>
    </div>
    <div class="col-md-11">
        <div id="queryHelp">
            <p>
                <b>*</b> wildcards can be used<br/>
                <b>~</b> can be placed after a term to perform 'fuzzy' searches (allows typos to match)<br/>
                <b>^N (where N = number)</b> can be used to 'boost' documents that match the term in the search results<br/>
                If no field is explicitly defined, the system will search _all automatically<br/>
                Multiple field queries are combined with AND by default. You can also use AND/OR and brackets in queries<br/>
                If multiple terms are specified, they are all optional by default. The more that match, the higher they are
                ranked<br/>
                You can use the +/- operators before a term to signify if a condition must (or must not) be met
            </p>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <h2>Results</h2>
            
        @{
            var prevPage = Model.CurrentPage > 0 ? Model.CurrentPage - 1 : 0;
            var nextPage = Model.CurrentPage < Model.TotalPages ? Model.CurrentPage + 1 : Model.TotalPages;
        }

        @Html.ActionLink("<< Back ", "NavigatePage", "Search", new {query = Model.InputQuery, page = prevPage}, null)
        @Html.ActionLink(" Next >>", "NavigatePage", "Search", new { query = Model.InputQuery, page = nextPage }, null)
        @Html.Raw(string.Format("(Page {0}/{1})", Model.CurrentPage, Model.TotalPages));
            
        <p>Found @Model.Results.Total Employee(s) in @Model.Results.ElapsedMilliseconds ms</p>
          
        <div class="mdl-grid">
            @foreach (var searchHit in @Model.Results.Hits)
            {
                <div class="mdl-card mdl-cell mdl-cell--6-col mdl-shadow--8dp">
                    <div class="mdl-card__title">
                        <div class="card__employee">
                            <img src=@("http://www.gravatar.com/avatar/" + @searchHit.Source.Hash + "?d=identicon") alt="@searchHit.Source.FirstName" />
                            <div class="card__employee-content">
                                @Html.ActionLink(string.Format("{0} {1}", searchHit.Source.FirstName, searchHit.Source.LastName), "Index", "Employee", new { employeeId = searchHit.Source.Id }, null)
                            </div>
                        </div>
                    </div>
                    <div class="mdl-card__supporting-text">
                        <ul>
                            @{
                                if (searchHit.Highlights.Any())
                                {
                                    foreach (var match in searchHit.Highlights.SelectMany(higlight => higlight.Value.Highlights))
                                    {

                                        <li>@Html.Raw(string.Format("{0}", match))</li>
                                    }
                                }
                                    // Default to just showing some skills of matching employee if not specifying a field
                                else
                                {
                                    foreach (var skill in searchHit.Source.Skills.Take(5))
                                    {
                                        <li>@Html.Raw(string.Format("{0}", skill.Name))</li>
                                    }
                                }
                            }
                        </ul>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="col-md-4">
        <h2>Popular Terms</h2>
        @{
            var popularSkillTerms = Model.Results.Aggs.Terms("emp_skills_agg");
            if (popularSkillTerms != null && popularSkillTerms.Items != null)
            {
                <h3>Skills Field</h3>
                <ul>
                    @foreach (var term in popularSkillTerms.Items)
                    {
                        var val = Model.InputQuery + " AND skills.name:" + term.Key;   
                        <li>@Html.ActionLink(string.Format("{0} ({1} / {2})", term.Key, term.DocCount, Model.Results.Total), "AddQueryString", "Search", new { query = val }, null)</li>
                    }
                </ul>
            }

            var popularCertTerms = Model.Results.Aggs.Terms("emp_cert_agg");
            if (popularCertTerms != null && popularCertTerms.Items != null)
            {
                <h3>Certification Field</h3>
                <ul>
                    @foreach (var term in popularCertTerms.Items)
                    {
                        var val = Model.InputQuery + " AND certifications.name:" + term.Key;   
                        <li>@Html.ActionLink(string.Format("{0} ({1} / {2})", term.Key, term.DocCount, Model.Results.Total), "AddQueryString", "Search", new { query = val }, null)</li>
                    }
                </ul>
            }
        }
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            var query = $('#query');
            $('#search-addfield-fn').click(function () {
                query.val(query.val() + ' firstName:');
                query.focus().val(query.val());
            });
            $('#search-addfield-ln').click(function () {
                query.val(query.val() + ' lastName:');
                query.focus().val(query.val());
            });
            $('#search-addfield-sn').click(function () {
                query.val(query.val() + ' skills.name:');
                query.focus().val(query.val());
            });
            $('#search-addfield-syrs').click(function () {
                query.val(query.val() + ' skills.yearsOfExperience:>');
                query.focus().val(query.val());
            });
            $('#search-addfield-cn').click(function () {
                query.val(query.val() + ' certifications.name:');
                query.focus().val(query.val());
            });
            $('#search-addfield-cda').click(function () {
                query.val(query.val() + ' certifications.dateAchieved:');
                query.focus().val(query.val());
            });
            $('#search-addfield-cda').click(function () {
                query.val('_all:*');
                query.focus().val(query.val());
            });
        });
    </script>
}
