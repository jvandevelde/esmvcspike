@using WebApplication1.Controllers
@model ResultModel
                
@{ ViewBag.Title = "Home Page"; }

<div class="jumbotron">
    <h1>Skills Search</h1>
    <p class="lead">Search spike using Elasticsearch</p>
        
    @using (Html.BeginForm("GenerateData", "Home", FormMethod.Post))
    {
        <input type="submit" class="btn btn-primary btn-large" value="Generate Sample Data" />
    }
</div>

<div class="row">
    <div class="col-lg-8">
        @using (Html.BeginForm("Index", "Home", FormMethod.Post))
        {
            @Html.TextBox("query", Model.InputQuery, new {@class = "input-lg", @style = "width:450px; max-width: 450px"})
            <br/>
            <br/>
            <input type="submit" class="btn btn-primary btn-large" value="Submit &raquo;" />
        }
        
    </div>
    <div class="col-lg-4">
        <p>Available fields</p>
        <ul>
            <li>firstName:</li>
            <li>lastName:</li>
            <li>skills:</li>
            <li>certifications:</li>
            <li>_all</li>
        </ul>
    </div>
</div>
<div class="row">
    <div class="col-lg-8">
        <p>Wildcards [*] can be used</p>
        <p>~ can be placed after a term to perform 'fuzzy' searches (allows typos to match)</p>
        <p>^N (N = number) can be used to 'boost' documents that match the term in the search results</p>
        <p>If no field is explicitly defined, the system will search _all automatically</p>
        <p>Multiple field queries are combined with OR by default. You can also use AND/OR and brackets in queries</p>
    </div>
    <div class="col-lg-4">
        <h2>Autocomplete Demo</h2>
        <input id="tta" class="typeahead" data-provide="typeahead" placeholder="Search available skills" autocomplete="off" />
        <div id="details"></div>
        <div id="selectedSuggestion"></div>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <h2>Results</h2>
            
        @{
            var prevPage = Model.CurrentPage > 0 ? Model.CurrentPage - 1 : 0;
            var nextPage = Model.CurrentPage < Model.TotalPages ? Model.CurrentPage + 1 : Model.TotalPages;
        }

        @Html.ActionLink("<< Back ", "NavigatePage", "Home", new {query = Model.InputQuery, page = prevPage}, null)
        @Html.ActionLink(" Next >>", "NavigatePage", "Home", new {query = Model.InputQuery, page = nextPage}, null)
        @Html.Raw(string.Format("(Page {0}/{1})", Model.CurrentPage, Model.TotalPages));
            
        <p>Found @Model.Results.Total documents in @Model.Results.ElapsedMilliseconds ms</p>
            
        @foreach (var searchHit in @Model.Results.Hits)
        {
            <ul>
                <li>@string.Format("{0} {1}", searchHit.Source.FirstName, searchHit.Source.LastName)</li>
                <ul>
                    @foreach (var skill in searchHit.Highlights.SelectMany(higlight => higlight.Value.Highlights))
                    {
                        <li>@Html.Raw(string.Format("  {0}", skill))</li>
                    }
                </ul>
            </ul>
        }
    </div>
    <div class="col-md-4">
        <h2>Popular Terms</h2>
        @{
            var popularSkillTerms = Model.Results.Aggs.Terms("emp_skills_agg");
            if (popularSkillTerms != null && popularSkillTerms.Items != null)
            {
                <h3>Skills Field</h3>
                <ul>
                    @foreach (var term in popularSkillTerms.Items)
                    {
                        var val = Model.InputQuery + " AND skills:" + term.Key;   
                        <li>@Html.ActionLink(string.Format("{0} ({1}/{2} docs)", term.Key, term.DocCount, Model.Results.Total), "AddQueryString", "Home", new { query = val }, null)</li>
                    }
                </ul>
            }

            var popularCertTerms = Model.Results.Aggs.Terms("emp_cert_agg");
            if (popularCertTerms != null && popularCertTerms.Items != null)
            {
                <h3>Certification Field</h3>
                <ul>
                    @foreach (var term in popularCertTerms.Items)
                    {
                        var val = Model.InputQuery + " AND certifications:" + term.Key;   
                        <li>@Html.ActionLink(string.Format("{0} ({1}/{2} docs)", term.Key, term.DocCount, Model.Results.Total), "AddQueryString", "Home", new { query = val }, null)</li>
                    }
                </ul>
            }
        }
    </div>
</div>

@section scripts {
    <script type="text/javascript">
        $(document).ready(function() {
            $(".typeahead").typeahead({
                    highlight: true
                },
                {
                    name: 'skills',
                    displayKey: 'value',
                    source: function(query, process) {
                        var results = [];

                        // This is going to make an HTTP post request to the controller
                        return $.post('/Home/AutoCompleteSkills', { query: query }, function(data) {

                            // Loop through and push to the array
                            $.each(data, function(i, result) {
                                results.push({ value: result.Name });
                            });

                            // Process the details
                            process(results);
                        });
                    },
                    templates: {
                        empty: ['<div class="tt-empty-message">', 'No Results', '</div>'].join('\n'),
                        header: '<h3 class="tt-tag-heading">Skills</h3>'
                    }
                },
                {
                    name: 'certifications',
                    displayKey: 'value',
                    source: function(query, process) {
                        var results = [];

                        // This is going to make an HTTP post request to the controller
                        return $.post('/Home/AutoCompleteCertifications', { query: query }, function(data) {

                            // Loop through and push to the array
                            $.each(data, function(i, result) {
                                results.push({ value: result.Name });
                            });

                            // Process the details
                            process(results);
                        });
                    },
                    templates: {
                        empty: ['<div class="tt-empty-message">', 'No Results', '</div>'].join('\n'),
                        header: '<h3 class="tt-tag-heading">Certifications</h3>'
                    }
                })
                .on('typeahead:selected', function(eventObject, suggestionObject, suggestionDataset) {
                    // Set the text to our selected value
                    $("#details").text("Selected : " + suggestionObject.value);
                });;
        });
</script>
}